@page "/ToDoItems"
@using BlazorDesktopDemo.Models;
@inject BlazorDesktopDemo.Data.ApplicationDbContext db;
@inject NavigationManager Navigation
<center><h5><u>TODO: Items</u></h5></center>
@* <NavLink class="nav-link btn btn-success" href="compleatedtasks" style="width:25%; " >
    Completed Items</NavLink> *@
    <button class="btn btn-success" @onclick="NavigateToCompleated">
    Navigate to Compleated Items
</button>
<div style="float:right;">
<input type="text" @bind="search">|<button class="btn btn-primary" @onclick="OnInitialized">Search Cat.</button>
</div>
<hr>
<p style="margin-bottom: 0;">Add Item /Category:</p>
<p><input @bind=@Descriptions type="text" size = "50">/<input @bind=@category type="text" size="8">
<button class="btn btn-success" @onclick="AddFixedItem" style="margin-left:10px">Add</button></p>
<p style="color:red;">@authmsg</p>
@* <p>Add Comment: <input @bind=@comments type="text"></p> *@
<table class="table table-striped">  
<thead>    
    <th> Date </th> 
        <th>
            Descriptions
        </th> 
                <th>
            Comment
        </th> 
        <th></th>
        <th>Cat.</th>
    
</thead>
<tbody>
@foreach (var item in items)
{ 
     <tr>
        <td>
            @item.finishedDate.ToShortDateString()
        </td>
        <td>
            @item.Description
        </td>
                <td>
            <p><input @bind=@comments type="text" ></p>
        </td>
        <td>
            <button class="btn btn-primary"  @onclick="@(() => SetAsDone(item.id))">Done</button>|
            <button class="btn btn-danger"  @onclick="@(() => Remove(item.id))">X</button>
        </td>
        <td>
            @item.Category
        </td>
    </tr>     
}
</tbody>
</table>
<button class="btn btn-primary" @onclick="CategoryList">Get Cats</button>
<table class="table table-striped">  
<thead>    
    <th> Category </th> 
   
</thead>
<tbody>
@foreach (var item in cats)
{
            <td>
            @item.Category
        </td>
    
}
</tbody>
</table>

@code
{
    public string authmsg = "";
    public string search = "";
    public string msgs ="Items";
    List<ToDoItem> items = new List<ToDoItem>();
    List<ToDoItem> cats = new List<ToDoItem>();
    string Descriptions ="";
    string comments = "";
    string category ="";
    protected override void OnInitialized()
    {
        if(search == ""){
        items = db.Items.Where(x=>x.IsDone == false).ToList();
        }
        else
        {
            items = db.Items
            .Where(x=>x.IsDone == false && x.Category == search)
            .ToList();
        }
       
    }
        private void NavigateToCompleated()
    {
        Navigation.NavigateTo("compleatedtasks/"+msgs);
    }
    public async Task SetAsDone(string id)
    {

        var itemCh = db.Items.Where(x=>x.id == id).SingleOrDefault();
        itemCh.IsDone = true;
        itemCh.Comment = comments;
        itemCh.finishedDate = DateTime.Now;
        await db.SaveChangesAsync();
        Descriptions = "";
        comments = "";
        StateHasChanged();
        OnInitialized();

    }

    public void Remove(string id)
    {

        var item = db.Items.Where(x=>x.id == id).FirstOrDefault();
        db.Remove(item);
        db.SaveChanges();
        StateHasChanged();
        OnInitialized();

    }
    void AddFixedItem()
    {
        var item = new ToDoItem
        {
            id = Guid.NewGuid().ToString(),
            Description = Descriptions,
            IsDone = false,
            Comment = comments,
            Category = category,
            finishedDate = DateTime.Now
        };        
        if(item.Category !="")
        {
            items.Add(item);
            db.Items.Add(item);
            db.SaveChanges();
            authmsg = "";
        }
        else
        {

            authmsg = "Category is required";
        }        
        Descriptions = "";
        comments = "";
        StateHasChanged();
    }

    public void CategoryList()
    {

        var cat = db.Items.ToList();

        var list = cat.Select(p=>p.Category).Distinct();

        foreach(var item in list)
        {
            ToDoItem it = new ToDoItem();
            it.Category = item;

            cats.Add(it);
        }

    }
}

     